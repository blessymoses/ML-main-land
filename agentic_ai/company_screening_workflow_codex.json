{
  "name": "Company Screening Agent v2",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "ddc81a5f-f13b-4a6a-9a68-f165a48f4b8f",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -380,
        0
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "companyName",
              "value": "Example Company Pte Ltd"
            },
            {
              "name": "uen",
              "value": ""
            },
            {
              "name": "lei",
              "value": ""
            }
          ]
        }
      },
      "id": "86db53a9-5eb9-44ea-a64f-d2649d6b19f7",
      "name": "Set Company Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        -180,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const companyName = ($json.companyName || '').trim();\nif (!companyName) {\n  throw new Error('Set `companyName` in the Set Company Input node before executing the workflow.');\n}\nconst encode = (input) => encodeURIComponent(input);\nconst normalized = companyName.replace(/\\s+/g, ' ').trim();\nconst queries = {\n  acraSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' site:bizfile.gov.sg')}`,\n  bloombergSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' LEI site:bloomberg.com')}`,\n  profileSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' official website company profile')}`,\n  directorSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' board of directors')}`,\n  cxoSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' CEO CFO COO CTO leadership team')}`,\n  adverseSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' fraud OR lawsuit OR enforcement action OR default')}`,\n  sanctionsSearch: `https://duckduckgo.com/html/?q=${encode(normalized + ' sanction OR watchlist OR blacklist')}`\n};\nreturn [\n  {\n    companyName: normalized,\n    uen: ($json.uen || '').trim(),\n    lei: ($json.lei || '').trim(),\n    queries,\n    sources: {\n      acra: [],\n      bloomberg: [],\n      webProfiles: [],\n      directors: [],\n      cxo: [],\n      adverseMedia: [],\n      sanctions: []\n    }\n  }\n];"
      },
      "id": "6c8b1cf4-1f6f-4f71-b8a3-dcf287f092d1",
      "name": "Prepare Search Targets",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        20,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"acraSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "a0a0ea10-fd63-4d55-aba3-9f2c338337f7",
      "name": "Search ACRA Bizfile",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        240,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst results = [];\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.35 + tokenMatches * 0.08;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  if (domain && domain.includes('bizfile.gov.sg')) {\n    confidence += 0.4;\n  }\n  if (/uen|reg\\.?|registration/.test(text)) {\n    confidence += 0.1;\n  }\n  confidence = Math.min(1, confidence);\n  results.push({\n    title,\n    link,\n    snippet,\n    domain,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (results.length >= 6) {\n    break;\n  }\n}\nconst sources = { ...($json.sources || {}) };\nsources.acra = results;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "4c1a27d3-ad25-4ab3-bd9d-19794b2074fa",
      "name": "Parse ACRA Search",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        500,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"bloombergSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "7b63018e-a70c-4e7a-9f4e-0284a2dc85bd",
      "name": "Search Bloomberg LEI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        740,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst results = [];\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.25 + tokenMatches * 0.08;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  if (domain && domain.includes('bloomberg.com')) {\n    confidence += 0.35;\n  }\n  const leiMatches = (title + ' ' + snippet).match(/\b[A-Z0-9]{18,20}\b/g) || [];\n  const leiCandidates = Array.from(new Set(leiMatches.filter((value) => value.length >= 18)));\n  if (leiCandidates.length) {\n    confidence += 0.1;\n  }\n  confidence = Math.min(1, confidence);\n  results.push({\n    title,\n    link,\n    snippet,\n    domain,\n    confidence: Number(confidence.toFixed(2)),\n    leiCandidates\n  });\n  if (results.length >= 6) {\n    break;\n  }\n}\nconst sources = { ...($json.sources || {}) };\nsources.bloomberg = results;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "f0b83b84-3895-4798-986f-52959a79bf1c",
      "name": "Parse Bloomberg Search",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        980,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"profileSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "a7241622-ec42-4c9e-b98e-4695b352269b",
      "name": "Search Company Profiles",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1220,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst companyTokens = ($json.companyName || '').toLowerCase().split(/\\s+/).map((token) => token.replace(/[^a-z0-9]/g, '')).filter((token) => token.length > 2);\nconst results = [];\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let confidence = 0.28;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  const normalizedDomain = domain ? domain.replace(/[^a-z0-9]/g, '') : '';\n  if (domain) {\n    const matchesToken = companyTokens.some((token) => token && normalizedDomain.includes(token));\n    if (matchesToken) {\n      confidence += 0.25;\n    }\n  }\n  if (/official|company|profile|about|corporate/.test(text)) {\n    confidence += 0.12;\n  }\n  if (/press|news|release|announcement/.test(text)) {\n    confidence += 0.05;\n  }\n  confidence = Math.min(1, confidence);\n  results.push({\n    title,\n    link,\n    snippet,\n    domain,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (results.length >= 6) {\n    break;\n  }\n}\nconst sources = { ...($json.sources || {}) };\nsources.webProfiles = results;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "3be3e85f-1b38-4120-8ec3-8f4ae0d0aa62",
      "name": "Parse Company Profiles",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1460,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"directorSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "b693ec75-1a80-4edd-b302-5e1f7efec50b",
      "name": "Search Directors",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1700,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst rawResults = [];\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.24 + tokenMatches * 0.08;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  if (domain && (domain.includes('linkedin.com') || domain.includes('bloomberg.com') || domain.includes('reuters.com'))) {\n    confidence += 0.2;\n  }\n  confidence = Math.min(1, confidence);\n  rawResults.push({\n    title,\n    link,\n    snippet,\n    domain,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (rawResults.length >= 6) {\n    break;\n  }\n}\nconst nameRegex = /\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+){1,3})\b/g;\nconst blockedTokens = new Set(['Board', 'Directors', 'Chief', 'Officer', 'Company', 'Group', 'Holdings', 'Limited', 'Ltd', 'Pte', 'Management', 'Leadership', 'Press', 'Release']);\nconst aggregated = new Map();\nfor (const result of rawResults) {\n  const textBlock = `${result.title} ${result.snippet}`;\n  let match;\n  while ((match = nameRegex.exec(textBlock)) !== null) {\n    const candidate = match[1].trim();\n    const words = candidate.split(/\\s+/);\n    if (words.length < 2 || words.length > 4) {\n      continue;\n    }\n    if (words.some((word) => blockedTokens.has(word))) {\n      continue;\n    }\n    if (candidate === candidate.toUpperCase()) {\n      continue;\n    }\n    const normalizedName = candidate.replace(/\\s+/g, ' ');\n    const confidenceBoost = result.domain.includes('linkedin.com') ? 0.25 : (result.domain.includes('bloomberg.com') ? 0.2 : 0.12);\n    const combinedConfidence = Math.min(1, result.confidence + confidenceBoost);\n    const existing = aggregated.get(normalizedName);\n    if (!existing || combinedConfidence > existing.confidence) {\n      aggregated.set(normalizedName, {\n        name: normalizedName,\n        source: result.link,\n        domain: result.domain,\n        snippet: result.snippet,\n        confidence: Number(combinedConfidence.toFixed(2))\n      });\n    }\n  }\n}\nconst directors = Array.from(aggregated.values()).sort((a, b) => b.confidence - a.confidence).slice(0, 12);\nconst sources = { ...($json.sources || {}) };\nsources.directors = directors;\nsources.directorPages = rawResults;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "95edeb31-8b36-4bc9-bfdc-04cc43d8f98b",
      "name": "Parse Directors",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1940,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"cxoSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "3a942106-c94d-4f4b-9ff1-76afd37765a6",
      "name": "Search CXO Leadership",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2180,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst rawResults = [];\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.24 + tokenMatches * 0.07;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  if (domain && (domain.includes('linkedin.com') || domain.includes('bloomberg.com') || domain.includes('forbes.com'))) {\n    confidence += 0.22;\n  }\n  if (/leadership|executive|management|c-suite/.test(text)) {\n    confidence += 0.1;\n  }\n  confidence = Math.min(1, confidence);\n  rawResults.push({\n    title,\n    link,\n    snippet,\n    domain,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (rawResults.length >= 6) {\n    break;\n  }\n}\nconst nameRegex = /\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+){1,3})\b/g;\nconst blockedTokens = new Set(['CEO', 'CFO', 'COO', 'CTO', 'CIO', 'CMO', 'CHRO', 'Chief', 'Officer', 'Company', 'Group', 'Limited', 'Ltd', 'Pte', 'Holdings', 'Business']);\nconst aggregated = new Map();\nfor (const result of rawResults) {\n  const textBlock = `${result.title} ${result.snippet}`;\n  let match;\n  while ((match = nameRegex.exec(textBlock)) !== null) {\n    const candidate = match[1].trim();\n    const words = candidate.split(/\\s+/);\n    if (words.length < 2 || words.length > 4) {\n      continue;\n    }\n    if (words.some((word) => blockedTokens.has(word))) {\n      continue;\n    }\n    if (candidate === candidate.toUpperCase()) {\n      continue;\n    }\n    const normalizedName = candidate.replace(/\\s+/g, ' ');\n    const roleMatch = textBlock.match(/(CEO|CFO|COO|CTO|CIO|CMO|CHRO|Chief [A-Za-z ]+)/i);\n    const inferredRole = roleMatch ? roleMatch[0].trim() : 'Executive';\n    const confidenceBoost = result.domain.includes('linkedin.com') ? 0.25 : (result.domain.includes('bloomberg.com') ? 0.2 : 0.12);\n    const combinedConfidence = Math.min(1, result.confidence + confidenceBoost);\n    const existing = aggregated.get(normalizedName);\n    if (!existing || combinedConfidence > existing.confidence) {\n      aggregated.set(normalizedName, {\n        name: normalizedName,\n        role: inferredRole,\n        source: result.link,\n        domain: result.domain,\n        snippet: result.snippet,\n        confidence: Number(combinedConfidence.toFixed(2))\n      });\n    }\n  }\n}\nconst executives = Array.from(aggregated.values()).sort((a, b) => b.confidence - a.confidence).slice(0, 12);\nconst sources = { ...($json.sources || {}) };\nsources.cxo = executives;\nsources.cxoPages = rawResults;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "b8407f09-6c7a-4895-8c7e-89d8d90d6f50",
      "name": "Parse CXO Leadership",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2420,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"adverseSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "4b1c5d57-f0d3-4f8f-83d9-8d0fba82e503",
      "name": "Search Adverse Media",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2660,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst results = [];\nconst severityRules = [\n  { pattern: /(fraud|embezzlement|money laundering|scam|ponzi|corruption|kickback|bribery)/i, label: 'high', weight: 0.9, tags: ['fraud'] },\n  { pattern: /(lawsuit|sued|prosecution|charged|enforcement|penalty|default|insolvency|bankruptcy|writ)/i, label: 'medium', weight: 0.7, tags: ['litigation'] },\n  { pattern: /(probe|investigation|warning|complaint|controversy|dispute|settlement|regulator)/i, label: 'low', weight: 0.5, tags: ['watch'] }\n];\nconst credibleDomains = ['reuters.com', 'bloomberg.com', 'businesstimes.com.sg', 'straitstimes.com', 'channelnewsasia.com', 'ft.com', 'wsj.com', 'theedge.com', 'nytimes.com', 'forbes.com'];\nconst currentYear = new Date().getUTCFullYear();\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.3 + tokenMatches * 0.07;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  let severity = 'informational';\n  let severityWeight = 0.3;\n  const tagSet = new Set();\n  for (const rule of severityRules) {\n    if (rule.pattern.test(text)) {\n      severity = rule.label;\n      severityWeight = Math.max(severityWeight, rule.weight);\n      rule.tags.forEach((tag) => tagSet.add(tag));\n    }\n  }\n  if (/fine|penalty|charged|guilty|convicted|raided/.test(text)) {\n    tagSet.add('enforcement');\n    severityWeight = Math.max(severityWeight, 0.75);\n  }\n  if (/settlement|class action/.test(text)) {\n    tagSet.add('litigation');\n  }\n  let domainBoost = 0;\n  if (domain && credibleDomains.includes(domain)) {\n    domainBoost = 0.15;\n  }\n  const yearMatch = text.match(/\b(20\\d{2}|19\\d{2})\b/);\n  let recencyBoost = 0;\n  let dateHint = null;\n  if (yearMatch) {\n    const year = parseInt(yearMatch[1], 10);\n    dateHint = year.toString();\n    if (currentYear - year <= 2) {\n      recencyBoost = 0.18;\n    } else if (currentYear - year <= 5) {\n      recencyBoost = 0.1;\n    } else {\n      recencyBoost = 0.04;\n    }\n  }\n  const severityScore = Number(Math.min(1, severityWeight + recencyBoost).toFixed(2));\n  confidence = Math.min(1, confidence + severityWeight + recencyBoost + domainBoost);\n  results.push({\n    title,\n    link,\n    snippet,\n    domain,\n    severity,\n    severityScore,\n    tags: Array.from(tagSet),\n    dateHint,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (results.length >= 8) {\n    break;\n  }\n}\nconst sources = { ...($json.sources || {}) };\nsources.adverseMedia = results;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "18fa96f2-26f3-4f47-8f04-44187c22a948",
      "name": "Parse Adverse Media",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2900,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"queries\"][\"sanctionsSearch\"]}}",
        "responseFormat": "string",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; n8n Company Screening Agent/1.0; +https://n8n.io/)"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "bfdd2af5-3b70-4cd8-91cc-79f1bde097e3",
      "name": "Search Sanctions Watchlist",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3140,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const normalizeDuckUrl = (rawUrl) => {\n  try {\n    const urlObj = new URL(rawUrl);\n    if (urlObj.hostname === 'duckduckgo.com' && urlObj.pathname && urlObj.pathname.startsWith('/l/')) {\n      const target = urlObj.searchParams.get('uddg');\n      if (target) {\n        return decodeURIComponent(target);\n      }\n    }\n  } catch (error) {}\n  return rawUrl;\n};\nconst clean = (value) => value ? value.replace(/<[^>]+>/g, '').replace(/\\s+/g, ' ').trim() : '';\nconst html = $json.body || '';\nconst sections = html.split('<div class=\"result__body\">').slice(1);\nconst tokens = ($json.companyName || '').toLowerCase().split(/\\s+/).filter((token) => token.length > 2);\nconst results = [];\nconst sanctionRules = [\n  { pattern: /(ofac|sdn|specially designated|treasury)/i, label: 'high', weight: 0.9, tags: ['ofac'] },\n  { pattern: /(sanction|watchlist|blacklist|entity list|control list|watch list)/i, label: 'medium', weight: 0.7, tags: ['watchlist'] },\n  { pattern: /(mas|monetary authority of singapore|regulator|compliance|fine|penalty|restriction)/i, label: 'medium', weight: 0.65, tags: ['regulator'] }\n];\nconst credibleDomains = ['mas.gov.sg', 'ofac.treasury.gov', 'home.treasury.gov', 'un.org', 'europa.eu', 'asean.org', 'fincen.gov', 'justice.gov', 'dfat.gov.au'];\nconst currentYear = new Date().getUTCFullYear();\nfor (const section of sections) {\n  const linkMatch = section.match(/<a[^>]+class=\"result__a\"[^>]+href=\"([^\"]+)\"/i);\n  if (!linkMatch) {\n    continue;\n  }\n  const titleMatch = section.match(/<a[^>]+class=\"result__a\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const snippetMatch = section.match(/<a[^>]+class=\"result__snippet\"[^>]*>([\\s\\S]*?)<\\/a>/i);\n  const link = normalizeDuckUrl(linkMatch[1]);\n  const title = clean(titleMatch ? titleMatch[1] : '');\n  const snippet = clean(snippetMatch ? snippetMatch[1] : '');\n  const text = (title + ' ' + snippet).toLowerCase();\n  let tokenMatches = 0;\n  for (const token of tokens) {\n    if (text.includes(token)) {\n      tokenMatches += 1;\n    }\n  }\n  let confidence = 0.28 + tokenMatches * 0.07;\n  const domain = (() => {\n    try {\n      return new URL(link).hostname.replace(/^www\\./, '');\n    } catch (error) {\n      return '';\n    }\n  })();\n  let severity = 'informational';\n  let severityWeight = 0.35;\n  const tagSet = new Set();\n  for (const rule of sanctionRules) {\n    if (rule.pattern.test(text)) {\n      severity = rule.label;\n      severityWeight = Math.max(severityWeight, rule.weight);\n      rule.tags.forEach((tag) => tagSet.add(tag));\n    }\n  }\n  if (domain && credibleDomains.includes(domain)) {\n    confidence += 0.25;\n    severityWeight = Math.max(severityWeight, 0.85);\n  }\n  if (/delisted|removed/.test(text)) {\n    tagSet.add('update');\n  }\n  const yearMatch = text.match(/\b(20\\d{2})\b/);\n  let recencyBoost = 0;\n  let dateHint = null;\n  if (yearMatch) {\n    const year = parseInt(yearMatch[1], 10);\n    dateHint = year.toString();\n    if (currentYear - year <= 3) {\n      recencyBoost = 0.16;\n    } else {\n      recencyBoost = 0.06;\n    }\n  }\n  const severityScore = Number(Math.min(1, severityWeight + recencyBoost).toFixed(2));\n  confidence = Math.min(1, confidence + severityWeight + recencyBoost);\n  results.push({\n    title,\n    link,\n    snippet,\n    domain,\n    severity,\n    severityScore,\n    tags: Array.from(tagSet),\n    dateHint,\n    confidence: Number(confidence.toFixed(2))\n  });\n  if (results.length >= 8) {\n    break;\n  }\n}\nconst sources = { ...($json.sources || {}) };\nsources.sanctions = results;\nconst output = { ...$json, sources };\ndelete output.body;\nreturn [output];"
      },
      "id": "54c58d87-2c92-4bf8-8254-c1e789a9d46a",
      "name": "Parse Sanctions Watchlist",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3380,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const sources = $json.sources || {};\nconst entity = {\n  canonicalName: $json.companyName,\n  normalizedName: ($json.companyName || '').toUpperCase(),\n  identifiers: [],\n  aliases: [],\n  primarySource: null,\n  matchConfidence: 0,\n  sourceConfidence: {}\n};\nconst identifiers = [];\nif ($json.uen) {\n  identifiers.push({ type: 'UEN', value: $json.uen });\n}\nif ($json.lei) {\n  identifiers.push({ type: 'LEI', value: $json.lei });\n}\nconst leiSet = new Set();\nfor (const entry of sources.bloomberg || []) {\n  if (Array.isArray(entry.leiCandidates)) {\n    for (const candidate of entry.leiCandidates) {\n      if (candidate && candidate.length >= 18) {\n        leiSet.add(candidate);\n      }\n    }\n  }\n}\nfor (const candidate of leiSet) {\n  if (!identifiers.some((id) => id.value === candidate)) {\n    identifiers.push({ type: 'LEI_candidate', value: candidate });\n  }\n}\nentity.identifiers = identifiers;\nconst aliasSet = new Set();\nconst ingestAlias = (value) => {\n  if (!value) {\n    return;\n  }\n  const safeValue = value.replace(/\u2013/g, '-');\n  const parts = safeValue.split(/[-|:/]/);\n  for (const part of parts) {\n    const alias = part.replace(/\\s+/g, ' ').trim();\n    if (!alias) {\n      continue;\n    }\n    if (alias.length < 3 || alias.length > 120) {\n      continue;\n    }\n    if (alias.toLowerCase() === ($json.companyName || '').toLowerCase()) {\n      continue;\n    }\n    aliasSet.add(alias);\n  }\n};\nfor (const entry of sources.acra || []) {\n  ingestAlias(entry.title);\n}\nfor (const entry of sources.bloomberg || []) {\n  ingestAlias(entry.title);\n}\nfor (const entry of sources.webProfiles || []) {\n  ingestAlias(entry.title);\n}\nentity.aliases = Array.from(aliasSet).slice(0, 12);\nconst topAcra = (sources.acra || [])[0] || null;\nconst topBloomberg = (sources.bloomberg || [])[0] || null;\nconst topWeb = (sources.webProfiles || [])[0] || null;\nconst matchConfidence = Math.min(1, (topAcra?.confidence || 0) * 0.45 + (topBloomberg?.confidence || 0) * 0.35 + (topWeb?.confidence || 0) * 0.2);\nentity.matchConfidence = Number(matchConfidence.toFixed(2));\nconst primary = topAcra || topBloomberg || topWeb;\nentity.primarySource = primary ? {\n  title: primary.title,\n  link: primary.link,\n  domain: primary.domain,\n  confidence: primary.confidence\n} : null;\nentity.sourceConfidence = {\n  acra: topAcra?.confidence || 0,\n  bloomberg: topBloomberg?.confidence || 0,\n  web: topWeb?.confidence || 0\n};\nconst matches = {\n  acra: (sources.acra || []).slice(0, 3),\n  bloomberg: (sources.bloomberg || []).slice(0, 3),\n  web: (sources.webProfiles || []).slice(0, 3)\n};\nreturn [{ ...$json, entity, entityMatches: matches }];"
      },
      "id": "67feca93-d2f8-4f50-90b3-e6d50f7b689a",
      "name": "Entity Resolution & Normalization Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3620,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const sources = $json.sources || {};\nconst webProfiles = sources.webProfiles || [];\nconst directorProfiles = sources.directors || [];\nconst executiveProfiles = sources.cxo || [];\nconst mapEntry = (item) => ({\n  title: item.title,\n  link: item.link,\n  domain: item.domain,\n  confidence: item.confidence\n});\nconst websiteCandidate = webProfiles.find((item) => item.confidence >= 0.6 && item.domain && !item.domain.includes('wikipedia.org')) || webProfiles.find((item) => item.domain && !item.domain.includes('wikipedia.org')) || webProfiles[0] || null;\nconst officialWebsite = websiteCandidate ? {\n  url: websiteCandidate.link,\n  domain: websiteCandidate.domain,\n  confidence: websiteCandidate.confidence,\n  title: websiteCandidate.title\n} : null;\nconst pressReleases = webProfiles.filter((item) => /press|news|announcement|media|update/.test((item.title + ' ' + item.snippet).toLowerCase())).slice(0, 5).map(mapEntry);\nconst annualReports = webProfiles.filter((item) => /annual report|financial statements|annual results|agm|annual meeting/.test((item.title + ' ' + item.snippet).toLowerCase())).slice(0, 5).map(mapEntry);\nconst leadershipConfidence = (() => {\n  const combined = [...directorProfiles, ...executiveProfiles];\n  if (!combined.length) {\n    return 0;\n  }\n  const total = combined.reduce((sum, entry) => sum + (entry.confidence || 0), 0);\n  return Number((total / combined.length).toFixed(2));\n})();\nconst knowledgeGaps = [];\nif (!directorProfiles.length) {\n  knowledgeGaps.push('No named directors surfaced from open web results.');\n}\nif (!executiveProfiles.length) {\n  knowledgeGaps.push('No CXO profiles surfaced from open web results.');\n}\nif (!pressReleases.length) {\n  knowledgeGaps.push('No press releases or media coverage detected in top search results.');\n}\nif (!officialWebsite) {\n  knowledgeGaps.push('Official corporate website not confidently identified.');\n}\nconst businessIntel = {\n  officialWebsite,\n  pressReleases,\n  annualReports,\n  directors: directorProfiles,\n  executives: executiveProfiles,\n  leadershipConfidence,\n  knowledgeGaps\n};\nreturn [{ ...$json, businessIntel }];"
      },
      "id": "de338352-6502-4391-a508-871cc1b04656",
      "name": "Business Intelligence Synthesis Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3860,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const adverseMedia = ($json.sources?.adverseMedia || []).map((item) => ({ ...item, category: 'media' }));\nconst sanctions = ($json.sources?.sanctions || []).map((item) => ({ ...item, category: 'sanction' }));\nconst combined = [...adverseMedia, ...sanctions];\nconst seen = new Set();\nconst deduped = [];\nfor (const entry of combined) {\n  const key = entry.link || entry.title;\n  if (seen.has(key)) {\n    continue;\n  }\n  seen.add(key);\n  deduped.push(entry);\n}\ndeduped.sort((a, b) => {\n  const severityOrder = { high: 3, medium: 2, low: 1, informational: 0 };\n  const severityDiff = (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0);\n  if (severityDiff !== 0) {\n    return severityDiff;\n  }\n  return (b.confidence || 0) - (a.confidence || 0);\n});\nconst findings = deduped.slice(0, 12).map((item, index) => ({\n  rank: index + 1,\n  severity: item.severity || 'informational',\n  category: item.category,\n  title: item.title,\n  link: item.link,\n  domain: item.domain,\n  snippet: item.snippet,\n  confidence: item.confidence,\n  severityScore: item.severityScore,\n  tags: item.tags || [],\n  dateHint: item.dateHint || null\n}));\nconst insights = {\n  findings,\n  highestSeverity: findings[0]?.severity || 'none',\n  watchlistHits: sanctions.length,\n  adverseCount: adverseMedia.length\n};\nreturn [{ ...$json, adverseInsights: insights }];"
      },
      "id": "b0dece5b-5f6c-4f2d-b0a5-0dba7ee317f4",
      "name": "Adverse Media & Litigation Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4100,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const adverseInsights = $json.adverseInsights || { findings: [] };\nconst businessIntel = $json.businessIntel || { directors: [], executives: [] };\nconst entity = $json.entity || { matchConfidence: 0 };\nconst findings = Array.isArray(adverseInsights.findings) ? adverseInsights.findings : [];\nconst directors = Array.isArray(businessIntel.directors) ? businessIntel.directors : [];\nconst executives = Array.isArray(businessIntel.executives) ? businessIntel.executives : [];\nconst entityConfidence = typeof entity.matchConfidence === 'number' ? entity.matchConfidence : 0.4;\nconst directorConfidenceAvg = directors.length ? directors.reduce((sum, item) => sum + (item.confidence || 0), 0) / directors.length : 0;\nconst executiveConfidenceAvg = executives.length ? executives.reduce((sum, item) => sum + (item.confidence || 0), 0) / executives.length : 0;\nconst highSeverityCount = findings.filter((item) => item.severity === 'high').length;\nconst mediumSeverityCount = findings.filter((item) => item.severity === 'medium').length;\nconst sanctionCount = findings.filter((item) => item.category === 'sanction').length;\nlet score = 30;\nconst rationale = [];\nif (entityConfidence < 0.5) {\n  score += 12;\n  rationale.push({ factor: 'Entity resolution', detail: `Entity match confidence is ${entityConfidence.toFixed(2)}, below preferred threshold.`, impact: 'medium' });\n} else {\n  score -= 6;\n  rationale.push({ factor: 'Entity resolution', detail: `Entity match confidence is ${entityConfidence.toFixed(2)}, supporting data quality.`, impact: 'positive' });\n}\nif (highSeverityCount > 0) {\n  score += 35;\n  rationale.push({ factor: 'Adverse media', detail: `${highSeverityCount} high-severity negative media references detected.`, impact: 'high' });\n}\nif (mediumSeverityCount > 0) {\n  score += 18;\n  rationale.push({ factor: 'Adverse media', detail: `${mediumSeverityCount} medium-severity items require review.`, impact: 'medium' });\n}\nif (sanctionCount > 0) {\n  score += 30;\n  rationale.push({ factor: 'Watchlists', detail: `${sanctionCount} sanction/watchlist references surfaced.`, impact: 'critical' });\n}\nif (directorConfidenceAvg < 0.55) {\n  score += 10;\n  rationale.push({ factor: 'Leadership transparency', detail: 'Director profiles have low confidence from open web sources.', impact: 'medium' });\n} else if (directorConfidenceAvg > 0.75) {\n  score -= 8;\n  rationale.push({ factor: 'Leadership transparency', detail: 'Director profiles are well-correlated across open web sources.', impact: 'positive' });\n}\nif (executiveConfidenceAvg < 0.5) {\n  score += 8;\n  rationale.push({ factor: 'Executive coverage', detail: 'Limited CXO corroboration identified.', impact: 'medium' });\n}\nif ((businessIntel.pressReleases || []).length === 0) {\n  score += 4;\n  rationale.push({ factor: 'Media footprint', detail: 'No official press coverage located in top results.', impact: 'low' });\n} else {\n  score -= Math.min((businessIntel.pressReleases || []).length * 1.5, 6);\n}\nif (businessIntel.officialWebsite && businessIntel.officialWebsite.confidence >= 0.6) {\n  score -= 5;\n  rationale.push({ factor: 'Official presence', detail: 'Official website identified with strong confidence.', impact: 'positive' });\n} else {\n  score += 8;\n  rationale.push({ factor: 'Official presence', detail: 'Corporate website not confidently resolved.', impact: 'medium' });\n}\nscore = Math.max(0, Math.min(100, Math.round(score)));\nconst tier = score >= 70 ? 'High' : (score >= 40 ? 'Medium' : 'Low');\nconst risk = {\n  score,\n  tier,\n  rationale,\n  metrics: {\n    entityConfidence: Number(entityConfidence.toFixed(2)),\n    adverseHigh: highSeverityCount,\n    adverseMedium: mediumSeverityCount,\n    sanctions: sanctionCount,\n    directorConfidenceAvg: Number(directorConfidenceAvg.toFixed(2)),\n    executiveConfidenceAvg: Number(executiveConfidenceAvg.toFixed(2))\n  },\n  summary: `Counterparty risk assessed as ${tier} (${score}/100).`\n};\nreturn [{ ...$json, risk }];"
      },
      "id": "2b4e0dc2-0c53-4fde-b144-5398261c82e9",
      "name": "Risk Scoring & Rationale Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4340,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const entity = $json.entity || {};\nconst businessIntel = $json.businessIntel || {};\nconst adverseInsights = $json.adverseInsights || { findings: [] };\nconst risk = $json.risk || { score: 'N/A', tier: 'Unknown', rationale: [] };\nconst identifiers = Array.isArray(entity.identifiers) ? entity.identifiers : [];\nconst aliases = Array.isArray(entity.aliases) ? entity.aliases : [];\nconst directors = Array.isArray(businessIntel.directors) ? businessIntel.directors.slice(0, 8) : [];\nconst executives = Array.isArray(businessIntel.executives) ? businessIntel.executives.slice(0, 8) : [];\nconst adverseFindings = Array.isArray(adverseInsights.findings) ? adverseInsights.findings.slice(0, 8) : [];\nconst pressReleases = Array.isArray(businessIntel.pressReleases) ? businessIntel.pressReleases : [];\nconst annualReports = Array.isArray(businessIntel.annualReports) ? businessIntel.annualReports : [];\nconst knowledgeGaps = Array.isArray(businessIntel.knowledgeGaps) ? businessIntel.knowledgeGaps : [];\nconst formatConfidence = (value) => typeof value === 'number' ? value.toFixed(2) : 'N/A';\nconst formatLink = (label, url) => url ? `[${label}](${url})` : label;\nconst lines = [];\nlines.push('# Business Screening Evaluation (BSE)');\nlines.push('');\nlines.push(`**Company:** ${entity.canonicalName || $json.companyName || 'Unknown'}`);\nlines.push(`**Risk Tier:** ${risk.tier || 'Unknown'} (${risk.score !== undefined ? risk.score : 'N/A'}/100)`);\nlines.push('');\nlines.push('## Company Snapshot');\nlines.push(`- Canonical Name: ${entity.canonicalName || 'Not resolved'}`);\nlines.push(`- Normalized Name: ${entity.normalizedName || 'N/A'}`);\nlines.push(`- Official Identifiers: ${identifiers.length ? identifiers.map((id) => `${id.type} ${id.value}`).join('; ') : 'None surfaced.'}`);\nlines.push(`- Aliases: ${aliases.length ? aliases.join('; ') : 'None surfaced in open web results.'}`);\nlines.push(`- Entity Match Confidence: ${typeof entity.matchConfidence === 'number' ? entity.matchConfidence.toFixed(2) : 'N/A'}`);\nif (entity.primarySource && entity.primarySource.link) {\n  lines.push(`- Primary Source: ${formatLink(entity.primarySource.title || entity.primarySource.domain || 'Source', entity.primarySource.link)} (confidence ${formatConfidence(entity.primarySource.confidence)})`);\n}\nif (entity.sourceConfidence) {\n  lines.push(`- Source Confidence Map: ACRA ${formatConfidence(entity.sourceConfidence.acra)} | Bloomberg ${formatConfidence(entity.sourceConfidence.bloomberg)} | Web ${formatConfidence(entity.sourceConfidence.web)}`);\n}\nlines.push('');\nlines.push('## Business Intelligence Highlights');\nif (businessIntel.officialWebsite) {\n  lines.push(`- Official Website: ${formatLink(businessIntel.officialWebsite.domain || businessIntel.officialWebsite.title || 'Website', businessIntel.officialWebsite.url)} (confidence ${formatConfidence(businessIntel.officialWebsite.confidence)})`);\n} else {\n  lines.push('- Official Website: Not confidently identified.');\n}\nif (pressReleases.length) {\n  lines.push('- Press Coverage:');\n  pressReleases.forEach((item) => {\n    lines.push(`  - ${formatLink(item.title || item.domain || 'Press reference', item.link)} (confidence ${formatConfidence(item.confidence)})`);\n  });\n} else {\n  lines.push('- Press Coverage: No press releases detected in top search results.');\n}\nif (annualReports.length) {\n  lines.push('- Annual Reports:');\n  annualReports.forEach((item) => {\n    lines.push(`  - ${formatLink(item.title || item.domain || 'Annual report', item.link)} (confidence ${formatConfidence(item.confidence)})`);\n  });\n} else {\n  lines.push('- Annual Reports: No annual report artefacts captured.');\n}\nif (knowledgeGaps.length) {\n  lines.push('- Knowledge Gaps: ' + knowledgeGaps.join(' | '));\n}\nlines.push('');\nlines.push('## Leadership');\nif (directors.length) {\n  lines.push('| Director | Confidence | Source |');\n  lines.push('| --- | --- | --- |');\n  directors.forEach((director) => {\n    lines.push(`| ${director.name} | ${formatConfidence(director.confidence)} | ${formatLink(director.domain || 'source', director.source)} |`);\n  });\n} else {\n  lines.push('No named directors discovered via open web search.');\n}\nlines.push('');\nif (executives.length) {\n  lines.push('| Executive | Role | Confidence | Source |');\n  lines.push('| --- | --- | --- | --- |');\n  executives.forEach((executive) => {\n    lines.push(`| ${executive.name} | ${executive.role || 'Executive'} | ${formatConfidence(executive.confidence)} | ${formatLink(executive.domain || 'source', executive.source)} |`);\n  });\n} else {\n  lines.push('No CXO profiles discovered via open web search.');\n}\nlines.push('');\nlines.push('## Adverse Media & Litigation');\nif (adverseFindings.length) {\n  lines.push('| Rank | Severity | Category | Confidence | Source |');\n  lines.push('| --- | --- | --- | --- | --- |');\n  adverseFindings.forEach((item) => {\n    const sourceLabel = item.domain || 'link';\n    lines.push(`| ${item.rank} | ${item.severity} | ${item.category} | ${formatConfidence(item.confidence)} | ${formatLink(sourceLabel, item.link)} |`);\n  });\n} else {\n  lines.push('No material adverse media surfaced in top search results.');\n}\nlines.push('');\nlines.push('## Risk Assessment');\nlines.push(`- Overall Score: ${risk.score !== undefined ? risk.score : 'N/A'} (${risk.tier || 'Unrated'})`);\nif (risk.metrics) {\n  lines.push(`- Entity Confidence: ${formatConfidence(risk.metrics.entityConfidence)}`);\n  lines.push(`- Adverse Media (high/medium): ${risk.metrics.adverseHigh}/${risk.metrics.adverseMedium}`);\n  lines.push(`- Sanctions Hits: ${risk.metrics.sanctions}`);\n  lines.push(`- Director Confidence Avg: ${formatConfidence(risk.metrics.directorConfidenceAvg)}`);\n  lines.push(`- Executive Confidence Avg: ${formatConfidence(risk.metrics.executiveConfidenceAvg)}`);\n}\nlines.push('');\nlines.push('### Rationale');\nif (Array.isArray(risk.rationale) && risk.rationale.length) {\n  risk.rationale.forEach((item) => {\n    lines.push(`- ${item.factor}: ${item.detail} (impact ${item.impact})`);\n  });\n} else {\n  lines.push('- No specific rationale captured.');\n}\nlines.push('');\nlines.push('## References');\nconst referenceList = [];\nconst seenRefs = new Set();\nconst pushReference = (label, link) => {\n  if (!link) {\n    return;\n  }\n  if (seenRefs.has(link)) {\n    return;\n  }\n  seenRefs.add(link);\n  referenceList.push({ label, link });\n};\nif (entity.primarySource && entity.primarySource.link) {\n  pushReference(entity.primarySource.title || entity.primarySource.domain || 'Primary source', entity.primarySource.link);\n}\npressReleases.forEach((item) => pushReference(item.title || item.domain || 'Press reference', item.link));\nannualReports.forEach((item) => pushReference(item.title || item.domain || 'Annual report', item.link));\nadverseFindings.forEach((item) => pushReference(item.title || item.domain || 'Adverse reference', item.link));\nif (referenceList.length) {\n  referenceList.forEach((ref, index) => {\n    lines.push(`${index + 1}. ${formatLink(ref.label, ref.link)}`);\n  });\n} else {\n  lines.push('- None recorded during screening.');\n}\nconst report = lines.join('\n');\nreturn [{ ...$json, bseReport: report }];"
      },
      "id": "f41abeaf-ad61-4fcb-9464-00f097daa770",
      "name": "BSE Report Synthesizer",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4580,
        0
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set Company Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Company Input": {
      "main": [
        [
          {
            "node": "Prepare Search Targets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search Targets": {
      "main": [
        [
          {
            "node": "Search ACRA Bizfile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search ACRA Bizfile": {
      "main": [
        [
          {
            "node": "Parse ACRA Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse ACRA Search": {
      "main": [
        [
          {
            "node": "Search Bloomberg LEI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Bloomberg LEI": {
      "main": [
        [
          {
            "node": "Parse Bloomberg Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Bloomberg Search": {
      "main": [
        [
          {
            "node": "Search Company Profiles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Company Profiles": {
      "main": [
        [
          {
            "node": "Parse Company Profiles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Company Profiles": {
      "main": [
        [
          {
            "node": "Search Directors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Directors": {
      "main": [
        [
          {
            "node": "Parse Directors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Directors": {
      "main": [
        [
          {
            "node": "Search CXO Leadership",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search CXO Leadership": {
      "main": [
        [
          {
            "node": "Parse CXO Leadership",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CXO Leadership": {
      "main": [
        [
          {
            "node": "Search Adverse Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Adverse Media": {
      "main": [
        [
          {
            "node": "Parse Adverse Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Adverse Media": {
      "main": [
        [
          {
            "node": "Search Sanctions Watchlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Sanctions Watchlist": {
      "main": [
        [
          {
            "node": "Parse Sanctions Watchlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Sanctions Watchlist": {
      "main": [
        [
          {
            "node": "Entity Resolution & Normalization Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Entity Resolution & Normalization Agent": {
      "main": [
        [
          {
            "node": "Business Intelligence Synthesis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Business Intelligence Synthesis Agent": {
      "main": [
        [
          {
            "node": "Adverse Media & Litigation Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adverse Media & Litigation Agent": {
      "main": [
        [
          {
            "node": "Risk Scoring & Rationale Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Risk Scoring & Rationale Agent": {
      "main": [
        [
          {
            "node": "BSE Report Synthesizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "pinData": {},
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": false
  }
}